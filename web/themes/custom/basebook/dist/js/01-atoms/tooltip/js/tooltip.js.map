{"version":3,"file":"dist/js/01-atoms/tooltip/js/tooltip.js","mappings":";;;;AAAAA,MAAM,CAACC,SAAS,CAACC,OAAO,CAAG,CACzBC,MAAM,SAAAA,CAACC,CAAO,CAAE,CAUd,QAAS,CAAAC,CAAYA,CAACH,CAAO,CAAEI,CAAG,CAAE,CAClCC,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAE,SAACC,CAAK,CAAK,CACvCP,CAAO,CAACQ,QAAQ,CAACD,CAAK,CAACE,MAAM,CAAC,EACjCL,CAAG,CAACM,SAAS,CAACC,MAAM,CAAC,2BAA2B,CAEpD,CAAC,CACH,CASA,QAAS,CAAAC,CAASA,CAACZ,CAAO,CAAEa,CAAa,CAAE,IACnC,CAAAT,CAAG,CAAGJ,CAAO,CAACc,aAAa,CAAC,sBAAsB,CAAC,CACnDC,CAAM,CAAGX,CAAG,CAACM,SAAS,CAACF,QAAQ,CAAC,2BAA2B,CAAC,CAE7DO,CAAM,EAITF,CAAa,CAACG,YAAY,CAAC,eAAe,CAAE,OAAO,CAAC,CACpDZ,CAAG,CAACM,SAAS,CAACC,MAAM,CAAC,2BAA2B,CAAC,GAJjDE,CAAa,CAACG,YAAY,CAAC,eAAe,CAAE,MAAM,CAAC,CACnDZ,CAAG,CAACM,SAAS,CAACO,GAAG,CAAC,2BAA2B,CAAC,EAMhDd,CAAY,CAACH,CAAO,CAAEI,CAAG,CAC3B,CArCA,GAAM,CAAAc,CAAQ,CAAGhB,CAAO,CAACiB,gBAAgB,CAAC,aAAa,CAAC,CA6CxDD,CAAQ,CAACE,OAAO,CAAC,SAAChB,CAAG,CAAK,CACxB,GAAM,CAAAiB,CAAS,CAAGjB,CAAG,CAACU,aAAa,CAAC,gBAAgB,CAAC,CACrDO,CAAS,CAACf,gBAAgB,CAAC,OAAO,CAAE,UAAM,CACxCM,CAAS,CAACR,CAAG,CAAEiB,CAAS,CAC1B,CAAC,CAAC,CAGFA,CAAS,CAACf,gBAAgB,CAAC,OAAO,CAAE,SAACgB,CAAC,CAAK,CAC3B,QAAQ,GAAlBA,CAAC,CAACC,GAAgB,EACpBX,CAAS,CAACR,CAAG,CAAEiB,CAAS,CAE5B,CAAC,CACH,CAAC,CACH,CACF,CAAC,C","sources":["webpack://compound/./components/01-atoms/tooltip/tooltip.js"],"sourcesContent":["Drupal.behaviors.tooltip = {\n  attach(context) {\n    const tooltips = context.querySelectorAll(\".js-tooltip\");\n\n    /**\n     * clickOutside\n     *\n     * @description Hides tooltip if clicked outside\n     * @param {HTMLElement} tooltip The tooltip container\n     * @param {HTMLElement} tip The tooltip content to close\n     */\n    function clickOutside(tooltip, tip) {\n      document.addEventListener(\"click\", (event) => {\n        if (!tooltip.contains(event.target)) {\n          tip.classList.remove(\"tooltip__content--visible\");\n        }\n      });\n    }\n\n    /**\n     * toggleTip\n     *\n     * @description Displays tooltip. Returns nothing.\n     * @param {HTMLElement} tooltip The tooltip container\n     * @param {HTMLElement} tooltipButton The button controlling display\n     */\n    function toggleTip(tooltip, tooltipButton) {\n      const tip = tooltip.querySelector(\".js-tooltip__content\");\n      const hasTip = tip.classList.contains(\"tooltip__content--visible\");\n\n      if (!hasTip) {\n        tooltipButton.setAttribute(\"aria-expanded\", \"true\");\n        tip.classList.add(\"tooltip__content--visible\");\n      } else {\n        tooltipButton.setAttribute(\"aria-expanded\", \"false\");\n        tip.classList.remove(\"tooltip__content--visible\");\n      }\n\n      clickOutside(tooltip, tip);\n    }\n\n    /**\n     * init\n     *\n     * @description Initializes the component by attaching event listeners\n     *  to each of the tooltips.\n     */\n    tooltips.forEach((tip) => {\n      const tipButton = tip.querySelector(\".tooltip__icon\");\n      tipButton.addEventListener(\"click\", () => {\n        toggleTip(tip, tipButton);\n      });\n\n      // Keyboard controls for closing the modal\n      tipButton.addEventListener(\"keyup\", (e) => {\n        if (e.key === \"Escape\") {\n          toggleTip(tip, tipButton);\n        }\n      });\n    });\n  },\n};\n"],"names":["Drupal","behaviors","tooltip","attach","context","clickOutside","tip","document","addEventListener","event","contains","target","classList","remove","toggleTip","tooltipButton","querySelector","hasTip","setAttribute","add","tooltips","querySelectorAll","forEach","tipButton","e","key"],"sourceRoot":""}
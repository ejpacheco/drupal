{"version":3,"file":"dist/js/02-molecules/alert/js/alert.js","mappings":"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","sources":["webpack://compound/./components/02-molecules/alert/alert.js"],"sourcesContent":["Drupal.behaviors.alert = {\n  attach(context) {\n    // Selectors\n    const body = context.querySelector(\"body\");\n    const alerts = context.querySelectorAll(\".alert\");\n    const alertToggle = \".alert__toggle\";\n    // Classes and States\n    const alertId = \"data-alert-id\";\n    const alertState = \"data-alert-state\";\n    const buttonState = \"aria-expanded\";\n\n    // Function to expand an alert.\n    const expand = (item, toggle, id) => {\n      item.setAttribute(alertState, \"expanded\");\n      toggle.setAttribute(buttonState, \"true\");\n      localStorage.setItem(id, \"expanded\");\n    };\n\n    // Function to collapse an alert.\n    const collapse = (item, toggle, id) => {\n      item.setAttribute(alertState, \"collapsed\");\n      toggle.setAttribute(buttonState, \"false\");\n      localStorage.setItem(id, \"collapsed\");\n    };\n\n    // Function to dismiss an alert.\n    const dismiss = (item, id) => {\n      item.setAttribute(alertState, \"dismissed\");\n      body.classList.remove(id);\n      localStorage.setItem(id, \"dismissed\");\n    };\n\n    // Function to remove old alerts from storage.\n    const resetAlerts = () => {\n      Object.keys(localStorage).forEach((key) => {\n        if (key.substring(0, 12) === \"smith-alert-id-\") {\n          localStorage.removeItem(key);\n        }\n      });\n    };\n\n    // Function to check whether localStorage is both supported and available.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#testing_for_availability\n    function storageAvailable(type) {\n      let storage;\n      try {\n        storage = window[String(type)];\n        const x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n      } catch (e) {\n        return (\n          e instanceof DOMException &&\n          // everything except Firefox\n          (e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === \"QuotaExceededError\" ||\n            // Firefox\n            e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n          // acknowledge QuotaExceededError only if there's something already stored\n          storage &&\n          storage.length !== 0\n        );\n      }\n    }\n\n    if (storageAvailable(\"localStorage\")) {\n      alerts.forEach((alert) => {\n        const id = alert.getAttribute(alertId);\n        const type = alert.getAttribute(\"data-alert-type\");\n        const toggle = alert.querySelector(alertToggle);\n\n        // Get the alert state if previously interacted with by the user.\n        const state = localStorage.getItem(id);\n\n        // If the current alert has no state, clear other values from storage.\n        if (state == null) {\n          resetAlerts();\n          body.classList.add(id);\n        }\n\n        // If the alert was dismissed, keep it dismissed.\n        if (state === \"dismissed\") {\n          dismiss(alert, id);\n          body.classList.remove(id);\n          // If the alert was collapsed, load it in the collapsed state.\n        } else if (state === \"collapsed\") {\n          collapse(alert, toggle, id);\n        } else {\n          expand(alert, toggle, id);\n        }\n\n        // Toggle alert state\n        toggle.addEventListener(\"click\", () => {\n          if (type === \"emergency\") {\n            // For emergency alerts, toggle the \"expanded/collapsed\" state.\n            return alert.getAttribute(alertState) === \"expanded\"\n              ? collapse(alert, toggle, id)\n              : expand(alert, toggle, id);\n          }\n\n          // For all other alert types, dismiss the alert.\n          return dismiss(alert, id);\n        });\n      });\n    }\n  },\n};\n"],"names":["Drupal","behaviors","alert","attach","context","body","querySelector","alerts","querySelectorAll","alertState","buttonState","expand","item","toggle","id","setAttribute","localStorage","setItem","collapse","dismiss","classList","remove","resetAlerts","Object","keys","forEach","key","substring","removeItem","type","storage","window","e","DOMException","code","name","length","getAttribute","state","getItem","add","addEventListener"],"sourceRoot":""}